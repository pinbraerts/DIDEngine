#ifndef DEBUG_H
#define DEBUG_H

#ifdef DEBUGGING

#include <iostream>
#include <string>
#include "UTILS.h"

#define DEBUG_LOG(...) __DEBUG_LOG(__VA_ARGS__)

#ifndef __STANDART_DEBUG_PREFIX
#define __STANDART_DEBUG_PREFIX L"DEBUG: "
#endif // !__STANDART_DEBUG_PREFIX

#ifndef __STANDART_DEBUG_SEPARATOR
#define __STANDART_DEBUG_SEPARATOR L", "
#endif // !__STANDART_DEBUG_SEPARATOR

#ifndef __STANDART_DEBUG_ENDLINE
#define __STANDART_DEBUG_ENDLINE L"\n"
#endif // !__STANDART_DEBUG_ENDLINE

#ifndef __STANDART_DEBUG_SUFFIX
#define __STANDART_DEBUG_SUFFIX L""
#endif // !__STANDART_DEBUG_SUFFIX

#define __DEBUG_USING_2(WHICH, VALUE) std::wstring __DEBUG_TEM_##WHICH = __DEBUG_##WHICH; __DEBUG_##WHICH = VALUE
#define __DEBUG_USING_3(ID, WHICH, VALUE) std::wstring __DEBUG_TEM_##WHICH##_##ID = __DEBUG_##WHICH; __DEBUG_##WHICH = VALUE
#define __DEBUG_USING_4(WHICH1, VALUE1, WHICH2, VALUE2) __DEBUG_USING_2(WHICH1, VALUE1); __DEBUG_USING_2(WHICH2, VALUE2)
#define __DEBUG_USING_5(ID, WHICH1, VALUE1, WHICH2, VALUE2) __DEBUG_USING_3(ID, WHICH1, VALUE1); __DEBUG_USING_3(ID, WHICH2, VALUE2)
#define __DEBUG_USING_6(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3) __DEBUG_USING_4(WHICH1, VALUE1, WHICH2, VALUE2); __DEBUG_USING_2(WHICH3, VALUE3)
#define __DEBUG_USING_7(ID, WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3) __DEBUG_USING_5(ID, WHICH1, VALUE1, WHICH2, VALUE2); __DEBUG_USING_3(ID, WHICH3, VALUE3)
#define __DEBUG_USING_8(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3, WHICH4, VALUE4) __DEBUG_USING_6(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3); __DEBUG_USING_2(WHICH4, VALUE4)
#define __DEBUG_USING_9(ID, WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3, WHICH4, VALUE4) __DEBUG_USING_5(ID, WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3); __DEBUG_USING_3(ID, WHICH4, VALUE4)
#define DEBUG_USING(...) __MACRO_SELECTOR(__DEBUG_USING, __VA_ARGS__)(__VA_ARGS__)

#define __DEBUG_USING_WITHOUT_INIT_2(WHICH, VALUE) __DEBUG_TEM_##WHICH = __DEBUG_##WHICH; __DEBUG_##WHICH = VALUE
#define __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH, VALUE) __DEBUG_TEM_##WHICH##_##ID = __DEBUG_##WHICH; __DEBUG_##WHICH = VALUE
#define __DEBUG_USING_WITHOUT_INIT_4(WHICH1, VALUE1, WHICH2, VALUE2) __DEBUG_USING_WITHOUT_INIT_2(WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_2(WHICH2, VALUE2)
#define __DEBUG_USING_WITHOUT_INIT_5(ID, WHICH1, VALUE1, WHICH2, VALUE2) __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH2, VALUE2)
#define __DEBUG_USING_WITHOUT_INIT_6(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3) __DEBUG_USING_WITHOUT_INIT_2(WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_2(WHICH2, VALUE2); __DEBUG_USING_WITHOUT_INIT_2(WHICH3, VALUE3)
#define __DEBUG_USING_WITHOUT_INIT_7(ID, WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3) __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH2, VALUE2); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH3, VALUE3)
#define __DEBUG_USING_WITHOUT_INIT_8(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3, WHICH4, VALUE4) __DEBUG_USING_WITHOUT_INIT_2(WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_2(WHICH2, VALUE2); __DEBUG_USING_WITHOUT_INIT_2(WHICH3, VALUE3); __DEBUG_USING_WITHOUT_INIT_2(WHICH4, VALUE4)
#define __DEBUG_USING_WITHOUT_INIT_9(ID, WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3, WHICH4, VALUE4) __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH1, VALUE1); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH2, VALUE2); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH3, VALUE3); __DEBUG_USING_WITHOUT_INIT_3(ID, WHICH4, VALUE4)
#define DEBUG_USING_WITHOUT_INIT(...) __MACRO_SELECTOR(__DEBUG_USING_WITHOUT_INIT_, __VA_ARGS__)(__VA_ARGS__)

#define __DEBUG_STOP_USING_1(WHICH) __DEBUG_##WHICH = __DEBUG_TEM_##WHICH
#define __DEBUG_STOP_USING_2(WHICH1, WHICH2) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2)
#define __DEBUG_STOP_USING_3(WHICH1, WHICH2, WHICH3) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2); __DEBUG_STOP_USING_1(WHICH3)
#define __DEBUG_STOP_USING_4(WHICH1, WHICH2, WHICH3, WHICH4) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2); __DEBUG_STOP_USING_1(WHICH3); __DEBUG_STOP_USING_1(WHICH4)
#define DEBUG_STOP_USING(...) __MACRO_SELECTOR(__DEBUG_STOP_USING, __VA_ARGS__)(__VA_ARGS__)

#define __DEBUG_STOP_USING_ID_2(ID, WHICH) __DEBUG_##WHICH = __DEBUG_TEM_##WHICH##_##ID
#define __DEBUG_STOP_USING_ID_3(ID, WHICH1, WHICH2) __DEBUG_STOP_USING_ID_2(ID, WHICH1); __DEBUG_STOP_USING_ID_2(ID, WHICH2)
#define __DEBUG_STOP_USING_ID_4(ID, WHICH1, WHICH2, WHICH3) __DEBUG_STOP_USING_ID_3(ID, WHICH1, WHICH2); __DEBUG_STOP_USING_ID_2(ID, WHICH3)
#define __DEBUG_STOP_USING_ID_5(ID, WHICH1, WHICH2, WHICH3, WHICH4) __DEBUG_STOP_USING_ID_4(ID, WHICH1, WHICH2, WHICH3); __DEBUG_STOP_USING_ID_2(ID, WHICH4)
#define DEBUG_STOP_USING_ID(...) __MACRO_SELECTOR(__DEBUG_STOP_USING_ID, __VA_ARGS__)(__VA_ARGS__)

#define DEBUG_END_MAIN do { std::wcout << L"Press any key to quit... "; std::wstring res; std::getline(std::wcin, res); } while(false)

static std::wstring __DEBUG_SUFFIX = __STANDART_DEBUG_SUFFIX;
static std::wstring __DEBUG_PREFIX = __STANDART_DEBUG_PREFIX;
static std::wstring __DEBUG_SEPARATOR = __STANDART_DEBUG_SEPARATOR;
static std::wstring __DEBUG_ENDLINE = __STANDART_DEBUG_ENDLINE;

template<typename T, typename ...RT> void __DEBUG_LOG(const T& arg, const RT& ...args) {
	std::wcout << __DEBUG_PREFIX << arg << __DEBUG_SEPARATOR;
	__DEBUG_LOG_SECONDLY(args...);
}

template<typename T = const DIDESLC_t*> void __DEBUG_LOG(const T& arg = "") {
	std::wcout << __DEBUG_PREFIX << arg << __DEBUG_SUFFIX << __DEBUG_ENDLINE;
}

template<typename T, typename ...RT> void __DEBUG_LOG_SECONDLY(const T& arg, const RT& ...args) {
	std::wcout << arg << __DEBUG_SEPARATOR;
	__DEBUG_LOG_SECONDLY(args...);
}

template<typename T> void __DEBUG_LOG_SECONDLY(const T& arg) {
	std::wcout << arg << __DEBUG_SUFFIX << __DEBUG_ENDLINE;
}

#else

#define DEBUG_LOG(...)

#ifndef __STANDART_DEBUG_PREFIX
#define __STANDART_DEBUG_PREFIX
#endif // !__STANDART_DEBUG_PREFIX

#ifndef __STANDART_DEBUG_SEPARATOR
#define __STANDART_DEBUG_SEPARATOR
#endif // !__STANDART_DEBUG_SEPARATOR

#ifndef __STANDART_DEBUG_ENDLINE
#define __STANDART_DEBUG_ENDLINE
#endif // !__STANDART_DEBUG_ENDLINE

#ifndef __STANDART_DEBUG_SUFFIX
#define __STANDART_DEBUG_SUFFIX
#endif // !__STANDART_DEBUG_SUFFIX

#define DEBUG_USING(WHICH, VALUE)
#define DEBUG_STOP_USING(WHICH)

#define DEBUG_END_MAIN

#endif // DEBUGGING
#endif // !DEBUG_H
