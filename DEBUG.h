#ifndef DEBUG_H
#define DEBUG_H

#ifdef DEBUGGING

#include <iostream>
#include <string>

#define DEBUG_LOG(...) __DEBUG_H_DEBUG_LOG(__VA_ARGS__)

#ifndef STANDART_DEBUG_PREFIX
#define STANDART_DEBUG_PREFIX L"DEBUG: "
#endif // !STANDART_DEBUG_PREFIX

#ifndef STANDART_DEBUG_SEPARATOR
#define STANDART_DEBUG_SEPARATOR L", "
#endif // !STANDART_DEBUG_SEPARATOR

#ifndef STANDART_DEBUG_ENDLINE
#define STANDART_DEBUG_ENDLINE L"\n"
#endif // !STANDART_DEBUG_ENDLINE

#ifndef STANDART_DEBUG_SUFFIX
#define STANDART_DEBUG_SUFFIX L""
#endif // !STANDART_DEBUG_SUFFIX

#define __DEBUG_ARGS_SELECTOR_8(_1, _2, _3, _4, _5, _6, _7, _8, N, ...) N
#define __DEBUG_MACRO_BRACES(ARGS) __DEBUG_ARGS_SELECTOR_8 ARGS
#define __DEBUG_MACRO_SELECTOR(TARGET, ...) __DEBUG_MACRO_BRACES((__VA_ARGS__, TARGET##_8, TARGET##_7, TARGET##_6, TARGET##_5, TARGET##_4, TARGET##_3, TARGET##_2, TARGET##_1, ))
#define __DEBUG_CHOOSE_FROM_ARG(TARGET, ...) __DEBUG_MACRO_SELECTOR(TARGET, TARGET##_0 __VA_ARGS__ ())

#define __DEBUG_USING_2(WHICH, VALUE) std::wstring DEBUG_TEM_##WHICH = DEBUG_##WHICH; DEBUG_##WHICH = VALUE
#define __DEBUG_USING_4(WHICH1, VALUE1, WHICH2, VALUE2) __DEBUG_USING_2(WHICH1, VALUE1); __DEBUG_USING_2(WHICH2, VALUE2)
#define __DEBUG_USING_6(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3) __DEBUG_USING_2(WHICH1, VALUE1); __DEBUG_USING_2(WHICH2, VALUE2); __DEBUG_USING_2(WHICH3, VALUE3)
#define __DEBUG_USING_8(WHICH1, VALUE1, WHICH2, VALUE2, WHICH3, VALUE3, WHICH4, VALUE4) __DEBUG_USING_2(WHICH1, VALUE1); __DEBUG_USING_2(WHICH2, VALUE2); __DEBUG_USING_2(WHICH3, VALUE3); __DEBUG_USING_2(WHICH4, VALUE4)
#define DEBUG_USING(...) __DEBUG_MACRO_SELECTOR(__DEBUG_USING, __VA_ARGS__)(__VA_ARGS__)

#define __DEBUG_STOP_USING_1(WHICH) DEBUG_##WHICH = DEBUG_TEM_##WHICH
#define __DEBUG_STOP_USING_2(WHICH1, WHICH2) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2)
#define __DEBUG_STOP_USING_3(WHICH1, WHICH2, WHICH3) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2); __DEBUG_STOP_USING_1(WHICH3)
#define __DEBUG_STOP_USING_3(WHICH1, WHICH2, WHICH3, WHICH4) __DEBUG_STOP_USING_1(WHICH1); __DEBUG_STOP_USING_1(WHICH2); __DEBUG_STOP_USING_1(WHICH3); __DEBUG_STOP_USING_1(WHICH4)
#define DEBUG_STOP_USING(...) __DEBUG_MACRO_SELECTOR(__DEBUG_STOP_USING, __VA_ARGS__)(__VA_ARGS__)

#define DEBUG_END_MAIN do { std::cout << "Press any key to quit... "; std::string res; std::getline(std::cin, res); } while(false)

static std::wstring DEBUG_SUFFIX = STANDART_DEBUG_SUFFIX;
static std::wstring DEBUG_PREFIX = STANDART_DEBUG_PREFIX;
static std::wstring DEBUG_SEPARATOR = STANDART_DEBUG_SEPARATOR;
static std::wstring DEBUG_ENDLINE = STANDART_DEBUG_ENDLINE;

template<typename T, typename ...RT> void __DEBUG_H_DEBUG_LOG(const T& arg, const RT& ...args) {
	std::wcout << DEBUG_PREFIX << arg << DEBUG_SEPARATOR;
	__DEBUG_H_DEBUG_LOG_SECONDLY(args...);
}

template<typename T = const DIDESLC_t*> void __DEBUG_H_DEBUG_LOG(const T& arg = "") {
	std::wcout << DEBUG_PREFIX << arg << DEBUG_SUFFIX << DEBUG_ENDLINE;
}

template<typename T, typename ...RT> void __DEBUG_H_DEBUG_LOG_SECONDLY(const T& arg, const RT& ...args) {
	std::wcout << arg << DEBUG_SEPARATOR;
	__DEBUG_H_DEBUG_LOG_SECONDLY(args...);
}

template<typename T> void __DEBUG_H_DEBUG_LOG_SECONDLY(const T& arg) {
	std::wcout << arg << DEBUG_SUFFIX << DEBUG_ENDLINE;
}

#else

#define DEBUG_LOG(...)

#ifndef STANDART_DEBUG_PREFIX
#define STANDART_DEBUG_PREFIX
#endif // !STANDART_DEBUG_PREFIX

#ifndef STANDART_DEBUG_SEPARATOR
#define STANDART_DEBUG_SEPARATOR
#endif // !STANDART_DEBUG_SEPARATOR

#ifndef STANDART_DEBUG_ENDLINE
#define STANDART_DEBUG_ENDLINE
#endif // !STANDART_DEBUG_ENDLINE

#ifndef STANDART_DEBUG_SUFFIX
#define STANDART_DEBUG_SUFFIX
#endif // !STANDART_DEBUG_SUFFIX

#define DEBUG_USING(WHICH, VALUE)
#define DEBUG_STOP_USING(WHICH)

#define DEBUG_END_MAIN

#endif // DEBUGGING
#endif // !DEBUG_H
