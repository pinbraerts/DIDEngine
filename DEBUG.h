#ifndef DEBUG_H
#define DEBUG_H

#ifdef DEBUGGING

#include <iostream>
#include <string>

#define DEBUG_LOG(...) __DEBUG_H_DEBUG_LOG(__VA_ARGS__)

#ifndef STANDART_DEBUG_PREFIX
#define STANDART_DEBUG_PREFIX L"DEBUG: "
#endif // !STANDART_DEBUG_PREFIX

#ifndef STANDART_DEBUG_SEPARATOR
#define STANDART_DEBUG_SEPARATOR L", "
#endif // !STANDART_DEBUG_SEPARATOR

#ifndef STANDART_DEBUG_ENDLINE
#define STANDART_DEBUG_ENDLINE L"\n"
#endif // !STANDART_DEBUG_ENDLINE

#ifndef STANDART_DEBUG_SUFFIX
#define STANDART_DEBUG_SUFFIX L""
#endif // !STANDART_DEBUG_SUFFIX

#define DEBUG_USING_PREFIX(PREFIX) std::wstring DEBUG_TEM_PRE = DEBUG_PREFIX; DEBUG_PREFIX = PREFIX
#define DEBUG_STOP_USING_PREFIX DEBUG_PREFIX = DEBUG_TEM_PRE

#define DEBUG_USING_SEPARATOR(SEPARATOR) std::wstring DEBUG_TEM_SEP = DEBUG_SEPARATOR; DEBUG_SEPARATOR = SEPARATOR
#define DEBUG_STOP_USING_SEPARATOR DEBUG_SEPARATOR = DEBUG_TEM_SEP

#define DEBUG_USING_ENDLINE(ENDLINE) std::wstring DEBUG_TEM_END = DEBUG_ENDLINE; DEBUG_ENDLINE = ENDLINE
#define DEBUG_STOP_USING_ENDLINE DEBUG_END = DEBUG_TEM_END

#define DEBUG_USING_SUFFIX(SUFFIX) std::wstring DEBUG_TEM_SUF = DEBUG_SUFFIX; DEBUG_SUFFIX = SUFFIX
#define DEBUG_STOP_USING_SUFFIX DEBUG_SUFFIX = DEBUG_TEM_SUF

static std::wstring DEBUG_SUFFIX = STANDART_DEBUG_SUFFIX;
static std::wstring DEBUG_PREFIX = STANDART_DEBUG_PREFIX;
static std::wstring DEBUG_SEPARATOR = STANDART_DEBUG_SEPARATOR;
static std::wstring DEBUG_ENDLINE = STANDART_DEBUG_ENDLINE;

template<typename T, typename ...RT> void __DEBUG_H_DEBUG_LOG(const T& arg, const RT& ...args) {
	std::wcout << DEBUG_PREFIX << arg << DEBUG_SEPARATOR;
	__DEBUG_H_DEBUG_LOG_SECONDLY(args...);
}

template<typename T = const DIDESLC_t*> void __DEBUG_H_DEBUG_LOG(const T& arg = "") {
	std::wcout << DEBUG_PREFIX << arg << DEBUG_SUFFIX << DEBUG_ENDLINE;
}

template<typename T, typename ...RT> void __DEBUG_H_DEBUG_LOG_SECONDLY(const T& arg, const RT& ...args) {
	std::wcout << arg << DEBUG_SEPARATOR;
	__DEBUG_H_DEBUG_LOG_SECONDLY(args...);
}

template<typename T> void __DEBUG_H_DEBUG_LOG_SECONDLY(const T& arg) {
	std::wcout << arg << DEBUG_SUFFIX << DEBUG_ENDLINE;
}

#else

#define DEBUG_LOG(...)

#ifndef STANDART_DEBUG_PREFIX
#define STANDART_DEBUG_PREFIX
#endif // !STANDART_DEBUG_PREFIX

#ifndef STANDART_DEBUG_SEPARATOR
#define STANDART_DEBUG_SEPARATOR
#endif // !STANDART_DEBUG_SEPARATOR

#ifndef STANDART_DEBUG_ENDLINE
#define STANDART_DEBUG_ENDLINE
#endif // !STANDART_DEBUG_ENDLINE

#ifndef STANDART_DEBUG_SUFFIX
#define STANDART_DEBUG_SUFFIX
#endif // !STANDART_DEBUG_SUFFIX

#define DEBUG_USING_PREFIX(PREFIX)
#define DEBUG_STOP_USING_PREFIX

#define DEBUG_USING_SEPARATOR(SEPARATOR)
#define DEBUG_STOP_USING_SEPARATOR

#define DEBUG_USING_ENDLINE(ENDLINE)
#define DEBUG_STOP_USING_ENDLINE

#define DEBUG_USING_SUFFIX(SUFFIX)
#define DEBUG_STOP_USING_ENDLINE

#endif // DEBUGGING
#endif // !DEBUG_H
